// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace JomSibu.Shared.Models;

public partial class JomSibuDatabaseContext : DbContext
{
    public JomSibuDatabaseContext(DbContextOptions<JomSibuDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdvertisementsTable> AdvertisementsTables { get; set; }

    public virtual DbSet<BudgetStatusesTable> BudgetStatusesTables { get; set; }

    public virtual DbSet<HotelsTable> HotelsTables { get; set; }

    public virtual DbSet<LocationImagesTable> LocationImagesTables { get; set; }

    public virtual DbSet<LocationPreferencesTable> LocationPreferencesTables { get; set; }

    public virtual DbSet<LocationReviewsTable> LocationReviewsTables { get; set; }

    public virtual DbSet<LocationsTable> LocationsTables { get; set; }

    public virtual DbSet<PreferencesTable> PreferencesTables { get; set; }

    public virtual DbSet<UserDetailsTable> UserDetailsTables { get; set; }

    public virtual DbSet<UserHotelsTable> UserHotelsTables { get; set; }

    public virtual DbSet<UserPreferencesTable> UserPreferencesTables { get; set; }

    public virtual DbSet<UserRoutesTable> UserRoutesTables { get; set; }

    public virtual DbSet<UserVouchersTable> UserVouchersTables { get; set; }

    public virtual DbSet<VouchersTable> VouchersTables { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=JomSibu.Database;Integrated Security=true");

        modelBuilder.Entity<AdvertisementsTable>(entity =>
        {
            entity.ToTable("AdvertisementsTable");
        });

        modelBuilder.Entity<BudgetStatusesTable>(entity =>
        {
            entity.ToTable("BudgetStatusesTable");
        });

        modelBuilder.Entity<HotelsTable>(entity =>
        {
            entity.ToTable("HotelsTable");

            entity.HasOne(d => d.BudgetStatus).WithMany(p => p.HotelsTables)
                .HasForeignKey(d => d.BudgetStatusId)
                .HasConstraintName("FK_HotelsTable_ToBudgetStatusesTable");
        });

        modelBuilder.Entity<LocationImagesTable>(entity =>
        {
            entity.ToTable("LocationImagesTable");

            entity.HasOne(d => d.Location).WithMany(p => p.LocationImagesTables)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_LocationImagesTable_ToLocationsTable");
        });

        modelBuilder.Entity<LocationPreferencesTable>(entity =>
        {
            entity.ToTable("LocationPreferencesTable");

            entity.HasOne(d => d.Location).WithMany(p => p.LocationPreferencesTables)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_LocationPreferencesTable_ToLocationsTable");

            entity.HasOne(d => d.Preference).WithMany(p => p.LocationPreferencesTables)
                .HasForeignKey(d => d.PreferenceId)
                .HasConstraintName("FK_LocationPreferencesTable_ToPreferencesTable");
        });

        modelBuilder.Entity<LocationReviewsTable>(entity =>
        {
            entity.ToTable("LocationReviewsTable");

            entity.Property(e => e.Review).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Location).WithMany(p => p.LocationReviewsTables)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_LocationReviewsTable_ToLocationsTable");
        });

        modelBuilder.Entity<LocationsTable>(entity =>
        {
            entity.ToTable("LocationsTable");

            entity.Property(e => e.AverageReview).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OperationDateTime).HasColumnType("datetime");
            entity.Property(e => e.RecommendedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PreferencesTable>(entity =>
        {
            entity.ToTable("PreferencesTable");
        });

        modelBuilder.Entity<UserDetailsTable>(entity =>
        {
            entity.ToTable("UserDetailsTable");

            entity.HasOne(d => d.BudgetStatus).WithMany(p => p.UserDetailsTables)
                .HasForeignKey(d => d.BudgetStatusId)
                .HasConstraintName("FK_UserDetailsTable_ToBudgetStatusesTable");
        });

        modelBuilder.Entity<UserHotelsTable>(entity =>
        {
            entity.ToTable("UserHotelsTable");

            entity.Property(e => e.EndDate).HasColumnType("date");
            entity.Property(e => e.StartDate).HasColumnType("date");

            entity.HasOne(d => d.Hotel).WithMany(p => p.UserHotelsTables)
                .HasForeignKey(d => d.HotelId)
                .HasConstraintName("FK_UserHotelsTable_ToHotelsTable");

            entity.HasOne(d => d.User).WithMany(p => p.UserHotelsTables)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserHotelsTable_ToUserDetailsTable");
        });

        modelBuilder.Entity<UserPreferencesTable>(entity =>
        {
            entity.ToTable("UserPreferencesTable");

            entity.HasOne(d => d.Preference).WithMany(p => p.UserPreferencesTables)
                .HasForeignKey(d => d.PreferenceId)
                .HasConstraintName("FK_UserPreferencesTable_ToPreferencesTable");

            entity.HasOne(d => d.User).WithMany(p => p.UserPreferencesTables)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserPreferencesTable_ToUserDetailsTable");
        });

        modelBuilder.Entity<UserRoutesTable>(entity =>
        {
            entity.ToTable("UserRoutesTable");

            entity.Property(e => e.DateTime).HasColumnType("datetime");

            entity.HasOne(d => d.Location).WithMany(p => p.UserRoutesTables)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_UserRoutesTable_ToLocationsTable");

            entity.HasOne(d => d.User).WithMany(p => p.UserRoutesTables)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserRoutesTable_ToUserDetailsTable");
        });

        modelBuilder.Entity<UserVouchersTable>(entity =>
        {
            entity.ToTable("UserVouchersTable");

            entity.HasOne(d => d.User).WithMany(p => p.UserVouchersTables)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserVouchersTable_ToUserDetailsTable");

            entity.HasOne(d => d.Voucher).WithMany(p => p.UserVouchersTables)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_UserVouchersTable_ToVouchersTable");
        });

        modelBuilder.Entity<VouchersTable>(entity =>
        {
            entity.ToTable("VouchersTable");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}